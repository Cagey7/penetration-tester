import sys
import re
import socket
import requests


def main():
    if len(sys.argv) == 1:
        usage()

    # check port
    if sys.argv[1] == "-cp" or sys.argv[1] == "--check-port":
        if len(sys.argv) != 4:
            usage()
        else:
            if not (is_valid_ipv4(sys.argv[2]) or is_valid_domain(sys.argv[2])):
                usage()
            try:
                if int(sys.argv[3]) not in range(1, 65536):
                    usage()
            except ValueError:
                usage()
        port_scan(sys.argv[2], int(sys.argv[3]))
    
    # brute force password
    elif sys.argv[1] == "-bf" or sys.argv[1] == "--brute-force-psswd":
        if len(sys.argv) != 4:
            usage()
        else:
            brute_force_psswd(sys.argv[2], sys.argv[3])
    
    # get service name by port
    elif sys.argv[1] == "-gs" or sys.argv[1] == "--get-serveces":
        if len(sys.argv) != 3 and len(sys.argv) != 4:
            print("test")
            usage()
        elif len(sys.argv) == 3:
            try:
                get_port_service(int(sys.argv[2]))
            except:
                print("test2")
                usage()
        else:
            try:
                get_port_service(int(sys.argv[2]), int(sys.argv[3]))
            except:
                print("test3")
                usage()
    else:
        usage()


# brute force password
def brute_force_psswd(url, username):
    with open("most-popular-passwords.txt", "r") as file:
        passwords = [line.rstrip() for line in file.readlines()]

    print("Brute force is started. Wait...")
    for password in passwords:
        url = 'http://127.0.0.1:5000/login'
        data = {
            'username': username,
            'password': password,
        }
        response = requests.post(url, data=data)
        if "Here you can" in response.text:
            print(f"Password of {username} is {password}")
            break

# check port
def is_valid_ipv4(ip):
    pattern = r'^((25[0-5]|2[0-4]\d|[01]?\d{1,2})\.){3}(25[0-5]|2[0-4]\d|[01]?\d{1,2})$'
    if re.match(pattern, ip):
        return True
    return False


def is_valid_domain(domain):
    pattern = r'^[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}$'
    if re.match(pattern, domain):
        return True
    return False


def port_scan(host, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    if sock.connect_ex((host, port)):
        print(f"Port [{port}] on [{host}] is down!")
    else:
        print(f"Port [{port}] on [{host}] is up!")

# get service name by port
def get_port_service(start, finish=-1):
    if finish == -1:
        try:
            service_name = socket.getservbyport(start)
            print(f"{service_name} is running on port {start}")
        except OSError:
            print(f"No service on port {start}")
    else:
        for port in range(start, finish):
            try:
                service_name = socket.getservbyport(port)
                print(f"{service_name} is running on port {port}")
            except OSError:
                pass


def usage():
    print("Usage for check ports:")
    print("  python pentest.py [option] [host] [port]")
    print("Options:")
    print("  -cp, --check-port       Checks port")
    print("Example:")
    print("  python pentest.py --check-port example.com 443")

    print("Usage for get port service:")
    print("  python pentest.py [option] [first port] [last port]")
    print("Options:")
    print("  -gs, --get-serveces       Gets services by ports")
    print("Example:")
    print("  python pentest.py --get-serveces 1 100")

    print("Usage for brute force password:")
    print("  python pentest.py [option] [url] [username]")
    print("Options:")
    print("  -bf, --brute-force-psswd       Starts brute force")
    print("Example:")
    print("  python pentest.py -bf http://127.0.0.1:5000/login user")
    exit()


if __name__ == "__main__":
    main()